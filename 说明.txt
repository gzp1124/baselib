
使用步骤：



第一步：先在飞书文档中添加 applicationId，否则用不了 https://ifbz8hy4hh.feishu.cn/sheets/shtcnGZEHxm4s7GF6f8JQiqqgIb

0. 项目支持的最低版本21

项目的 gradle
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.2.2' apply false
    id 'com.android.library' version '7.2.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

1. 项目的 settings.gradle 文件中，下面的密码，只有只读权限，没有上传权限，可以放在其他的项目中
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public'
        }
        maven {
            credentials {
                username '6308a60201acbf842a4d05c0'
                password ']5pr_euLTUHE'
            }
            url 'https://packages.aliyun.com/maven/repository/2124813-release-mj2kic/'
        }
        maven { url "https://jitpack.io" }
        google()
        mavenCentral()
    }
}

2. APP 的 gradle 文件中
    plugins {
        id 'com.android.application'
        id 'kotlin-android'
        id 'kotlin-kapt'
        id 'kotlin-parcelize'
        id 'maven-publish'
    }

    kapt 和 applicationId 同级，defaultConfig 中

    multiDexEnabled true
    flavorDimensions "1"
    kapt {
        includeCompileClasspath = true
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    使用baselib
    implementation 'com.gzp1124.baselib:baselib:1.4.0'
    kapt "com.alibaba:arouter-compiler:1.5.2"
    kapt 'androidx.annotation:annotation:1.3.0'
    用到 xui 的话添加
    // XUI UI库 https://github.com/xuexiangjys/XUI/wiki
    implementation 'com.github.xuexiangjys:XUI:1.1.9'

2.0 千万注意：先在飞书文档中把 applicationId 加进去，不然不能使用 baselib
    https://ifbz8hy4hh.feishu.cn/sheets/shtcnGZEHxm4s7GF6f8JQiqqgIb

2.1 注意检查：app.gradle 文件 确保 android 节点下有
    android {
    ...
        dexOptions {
            javaMaxHeapSize "4g"
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = '1.8'
        }
        buildFeatures {
            viewBinding = true
            dataBinding = true
        }
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }
    ...
    }
2.2 注意检查：gradle.properties 文件，确保有
    android.useAndroidX=true
    android.enableJetifier=true

2.3 设置项目主题
    使用 XUI 的话
        <style name="TestTheme" parent="XUITheme.Phone">
        </style>
    不用 XUI，使用 系统自带的主题
        <style name="TestTheme" parent="BaseLibTheme">
        </style>
        BaseLibTheme 中什么也没改，完全等价于下面的写法，只是为了好记。
        <style name="TestTheme" parent="Theme.AppCompat.Light.NoActionBar">
        </style>

3. 使用欢迎页让用户接受隐私政策，不接受隐私政策不进入APP
    因为最新的隐私政策原因，不这么做APP可能无法上线
    参考：https://juejin.cn/post/6990643611130363917
    步骤：
    1. Settings.useSplashCheckPrivacy = true
    2. Manifast 中 application 下 添加如下代码，name 固定，value 是欢迎页的全路径
        <meta-data
            android:name="com.gzp1124.check.activity"
            android:value="com.thirtydays.kelake.module.splash.view.SplashActivity" />
    3. 欢迎页 CheckApp.getApp().isUserAgree() 来判断是否接受，注意 onResume 也要判断
    查看隐私政策详情也要在欢迎页打开，不能跳转其他页面打开
    4. 点击接受：CheckApp.getApp().agree(this,false,getIntent().getExtras());
    执行完上面的代码，application 中的 initSDK() 会自动进行执行。
    5. 然后进行后续的继续操作。打开新页面之类的。


4. 删除缓存在本机上的三方库（一般不需要操作）
    Mac：/Users/gzp1124/.gradle/caches/modules-2/files-2.1
    Windows：C:/Users/Administrator/.gradle/caches/modules-2/files-2.1

5. 业务数据的转换：@InverseMethod

6. 关于图片缩放 ScaleType 的解释
    最常用的2中模式：FIT_CENTER 缩放并完全展示图片 ImageView可能会有空白；CENTER_CROP 缩放并完整填充 ImageView 图片可能展示不完全
    https://www.jianshu.com/p/32e335d5b842
    以FIT_开头的4种，它们的共同点是都会对图片进行缩放；默认 FIT_CENTER
    以CENTER_开头的3种，它们的共同点是居中显示，图片的中心点会与ImageView的中心点重叠；
    ScaleType.MATRIX，这种就直接翻到最后看内容吧；

7. 使用 XAOP 进行面向切片编程，XAOP 是对 aspectjx 的一种封装，更加方便使用
    官方链接：
        XAOP：https://github.com/xuexiangjys/XAOP/wiki/%E9%9B%86%E6%88%90%E6%8C%87%E5%8D%97
        aspectjx：https://github.com/wurensen/gradle_plugin_android_aspectjx
    XAOP 不集成在 baselib 中，项目中要用到直接在项目中集成就行，集成方式：
    1>. 最新版的项目 build.gradle ，plugins {} 顶部添加如下代码
    buildscript {
        dependencies {
            classpath 'io.github.wurensen:gradle-android-plugin-aspectjx:3.0.0'
            classpath 'com.github.xuexiangjys.XAOP:xaop-plugin:1.1.0'
        }
    }
    2>. settings.gradle 中添加 maven { url "https://jitpack.io" }，
    保证 pluginManagement 和 dependencyResolutionManagement 的 repositories 中 都有 jitpack.io
    3>. app 的 build.gradle 中添加
    plugins {
        id 'com.android.application'
        id 'org.jetbrains.kotlin.android'
        上面的两个默认就有，添加下面的两个
        id 'io.github.wurensen.android-aspectjx' // app 中需要这个
        id 'com.xuexiang.xaop'  // app 和 module 中都需要这个
    }
    aspectjx {
        include 'com.gzp.myapplication' // 中间是项目 APP 的 applicationId
    }
    android {
    这里面没有啥特殊的
    ......
    }
    dependencies {
        // 添加
        implementation 'com.github.xuexiangjys.XAOP:xaop-runtime:1.1.0'
    }
    4>. 最后在 application 中初始化 XAOP 库
            XAOP.init(this) //初始化插件

            XAOP.debug(true) //日志打印切片开启
            XAOP.setOnPermissionDeniedListener {
                //申请权限被拒绝的处理
            }

            XAOP.setInterceptor(object : Interceptor {
                @Throws(Throwable::class)
                override fun intercept(type: Int, joinPoint: JoinPoint?): Boolean {
                    XLogger.d("正在进行拦截，拦截类型:$type")
                    when (type) {
                        1 -> {}
                        2 -> return true //return true，直接拦截切片的执行
                        else -> {}
                    }
                    return false
                }
            })

            XAOP.setIThrowableHandler { flag, throwable ->
                XLogger.d("捕获到异常，异常的flag:$flag")
            }
    5>. 防止快速点击的简单使用封装
        // 1秒可点击一次，默认是 1000 即1秒1次，可以修改 1000 为 2000 则表示 2秒可点击1次
        fun <T : View> T.click(block: (T) -> Unit){
            this.setOnClickListener(object : View.OnClickListener{
                @SingleClick(1000)
                override fun onClick(v: View) {
                    block(v as T)
                }
            })
        }
    6>. 更多的使用介绍：
        基础：https://github.com/xuexiangjys/XAOP/wiki/%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8
        进阶：https://github.com/xuexiangjys/XAOP/wiki/%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8